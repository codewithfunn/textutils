{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alerts.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","backgroundColor","value","rows","onChange","event","target","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","prototype","PropTypes","string","isRequired","aboutText","defaultProps","Alerts","alert","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.82fc79dd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      \r\n      <nav\r\n        className={` navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\" \">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"\">\r\n                  Home\r\n                </a>\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                  Home\r\n                </Link> */}\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link\" to=\"/about\">\r\n                  {props.aboutText}\r\n                </Link> */}\r\n              </li>\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-primary\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n            <div className=\"form-check form-switch\">\r\n              <input\r\n                onClick={props.toggleMode}\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                role=\"switch\"\r\n                id=\"flexSwitchCheckDefault\"\r\n              />\r\n              <label className={`form-check-label text-${props.mode==='light'?'dark':'light'}`} htmlFor=\"flexSwitchCheckDefault\">\r\n               Enable DarkMode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\nNavbar.prototype = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\nNavbar.defaultProps = {\r\n  title: \"set title here\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n  // text = \"new text\";// Wrong way to change the text\r\n  // setText(\"new text\");// right way to change the text\r\n\r\n  // const [myStyle,setMySyle] =useState({\r\n  //   color : 'black'\r\n  // });\r\n\r\n  // const ChangeToRed = ()=>{\r\n  //       if(myStyle==='black'){\r\n  //         setMySyle({\r\n  //           color : 'red'\r\n  //         })\r\n  //       }\r\n  //       else{\r\n  //         setMySyle({\r\n  //           color:'black'\r\n  //         })\r\n  //       }\r\n  // }\r\n\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    // console.log(\"UpperCase was clicked\"+ text);\r\n    setText(newText);\r\n    props.showAlert(\"Converted to UpperCase!\", \"success\");\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    // console.log(\"UpperCase was clicked\"+ text);\r\n    setText(newText);\r\n    props.showAlert(\"Converted to LowerCase!\",\"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Clear Text\",\"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"On Changed\")\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    // console.log(\"I am copy\");\r\n    let text = document.getElementById(\"textBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copy to clipboard\" , \"success\")\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra Space Removed\", \"success\");\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"container\" >\r\n        <div className=\"mb-3\" style = {{color: props.mode === \"dark\" ? \"white\" : \"black\"}}>\r\n          <h1  >{props.heading} </h1>\r\n          <textarea\r\n          // style ={myStyle}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\" , color: props.mode === \"dark\"?\"white\":\"black\"\r\n            }} \r\n            \r\n            className=\"form-control\"\r\n            value={text}\r\n            id=\"textBox\"\r\n            rows=\"8\"\r\n            onChange={handleOnChange}\r\n          ></textarea>\r\n        </div>\r\n        <div className=\"btn btn-primary mx-1\" onClick={handleUpClick}>\r\n          Convert to UpperCase\r\n        </div>\r\n        <div className=\"btn btn-primary mx-1\" onClick={handleLoClick}>\r\n          Convert to LowerCase\r\n        </div>\r\n        <div className=\"btn btn-primary mx-1\" onClick={handleClearClick}>\r\n          Clear\r\n        </div>\r\n              \r\n        {/* <div className=\"btn btn-primary mx-1\" onClick={ChangeToRed}>\r\n          red/black\r\n        </div> */}\r\n\r\n        <div className=\"btn btn-primary mx-1\" onClick={handleCopy}>\r\n          Copy\r\n        </div>\r\n\r\n        <div className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>\r\n          Remove Extra Spaces\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {\" \"}\r\n          {text.split(\" \").length} word and {text.length} characters\r\n        </p>\r\n        <p>\r\n          {0.008 * text.split(\" \").length} Minutes and{\" \"}\r\n          {0.48 * text.split(\" \").length} Second read\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter something in the textbox above to preveiw it here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alerts(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n  props.alert&&<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{props.alert.type}</strong> : {props.alert.msg}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Alerts;\r\n","import \"./App.css\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport TextForm from \"./components/TextForm\";\r\n// import About from \"./components/About\";\r\nimport React, { useState } from \"react\";\r\nimport Alerts from \"./components/Alerts\";\r\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\"); // whether dark mode is enable or not\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type,\r\n    });\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 2000);\r\n  };\r\n  const toggleMode = () => {\r\n    if (mode === \"light\") {\r\n      setMode(\"dark\");\r\n      document.body.style.backgroundColor = \"#142134\";\r\n      showAlert(\"Dark mode has been enabled\", \"success\");\r\n      document.title = \"TextUtils - Dark Mode\";\r\n\r\n      // setInterval(() => {\r\n      //   document.title = \"TextUtils is amazing\";\r\n      // }, 2000);\r\n      // setInterval(() => {\r\n      //   document.title = \"Install TextUlits Now!\";\r\n      // }, 1500);\r\n      // console.log(\"mode == light\");\r\n    } else {\r\n      setMode(\"light\");\r\n      document.body.style.backgroundColor = \"white\";\r\n      showAlert(\"Light mode has been enabled\", \"success\");\r\n      document.title = \"TextUtils - Light Mode\";\r\n\r\n      // console.log(\"mode change== dark\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <Navbar title = \"TextUtils\" aboutText = \"About textUtils\"/>  */}\r\n      {/* <Navbar />   */}\r\n      {/* <Router> */}\r\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}   />\r\n      <Alerts alert={alert} />\r\n        <div className=\"container my-3\">\r\n          {/* <Switch>\r\n            <Route path=\"/about\">\r\n              <About/>\r\n            </Route>\r\n            <Route path=\"/\"> */}\r\n              <TextForm\r\n                showAlert={showAlert}\r\n                heading=\"Enter the text to analyze below\"\r\n                mode={mode}\r\n              />\r\n            {/* </Route>\r\n          </Switch> */}\r\n        </div>\r\n      {/* </Router> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}